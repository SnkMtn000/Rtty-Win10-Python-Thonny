# My WIndows 10 Feld Hell
# baud regular = 0.08 seconds or slow at 14 baud or .07 seconds.
# ...and it works
import pysine

mark = 1675
# space = 1500
# bit_time = 0.057  # Slow .0659  fast .0081 smaller angles up, bigger down
# bit_time = .057 #slow hell works!  .057
bit_time = .0072 # fast hell works!  what ever...........0082  .0072

#textboxValue = '   ...   CQ CQ CQ CALLSIGN CALLSIGN CALLSIGN PSE K  ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 ...'
textboxValue = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 ./'

Hell = { # lead START with a space, 0 STOP with two marks 11
    "A" : "000000000111100000101100001001000010110001111000", # - OK
    "B" : "000000000100010001111100010101000101010000101000", # - OK
    "C" : "000000000011100001101100010001000100010000101000", # - OK
    "D" : "000000000100010001111100010001000100010000111000", # - OK
    "E" : "000000000111110001010100010101000100010001000100", # - OK
    "F" : "000000000111110000010100000101000000010000000100", # - OK
    "G" : "000000000011100001101100010001000101010000110100", # - OK
    "H" : "000000000111110000010000000100000001000001111100", # - OK
    "I" : "000000000000000001000100011111000100010000000000", # - OK
    "J" : "000000000110000010000000100000001000000011111000", # - OK
    "K" : "000000000111110000010000001100000101`00001000100", # - OK
    "L" : "000000000111110001000000010000000100000001000000", # - OK
    "M" : "000000000111110000001000000100000000100001111100", # - OK
    "N" : "000000000111110000000100000010000001000001111100", # - OK
    "O" : "000000000011100001000100010001000100010000111000", # - OK
    "P" : "000000000100010001111100010101000001010000011000", # - OK
    "Q" : "000000000011100001000100011001001100010010111000", # - OK
    "R" : "000000000111110000010100000101000011010001011000", # - OK
    "S" : "000000001011000010101000101010001010100001001000", # - OK
    "T" : "000000000000010000000100011111000000010000000100", # - OK
    "U" : "000000000111110001000000010000000100000001111100", # - OK
    "V" : "000000000111110000100000000100000000100000000100", # - OK
    "W" : "000000000111110001100000011111000100000001111100", # - OK
    "X" : "0000000001000100o0101000000100000010100001000100", # - OK
    "Y" : "000000000000010000001000011100000000100000000100", # - OK
    "Z" : "000000000100010001100100010101000100110001100100", # - OK
    " " : "0000000000000000", # - OK
    "0" : "000000000011100001100100010101000100110000111000", # - OK
    "1" : "000000000000010000000100011111000000000000000000", # - OK
    "2" : "000000000100100001100100010101000100110001000000", # - OK
    "3" : "000000000100010001000100010101000101010000111100", # - OK
    "4" : "000000000001110000010000000100000111110000010000", # - OK
    "5" : "000000000100000001011100010101000101010000110100", # - OK
    "6" : "000000000011110001010010010010100100100000110000", # - OK
    "7" : "000000000100010000100100000101000000110000000100", # - OK
    "8" : "000000000011110001001010010010100100101000111100", # - OK
    "9" : "000000000000110001001010010010100010101000111100", # - NOT OK
    "." : "000000000100000001000000000000000000000000000000", # - OK
    "/" : "000000000100000000100000000100000000100000000100", # - OK
    "*" : "000000000000000000000000000001000000111000000100", # = OK
    "~" : "011011110110101101111111" # FIGURE 11011 J 11010 LETTERS 11111 -  BELL ???  Nothing
    }

class MyCode():      
    #def work(self, input_items, output_items):
    def MyWork():
        global Hell
        global textboxValue
        bit_stream = ""
        output_items = ""
        if (len(textboxValue) > 0):
            for in0 in textboxValue:
                inChar = str (in0)
                ch = inChar.upper()
                if (not(ch in Hell)):
                    ch = "?"
                _dots = str( Hell.get(ch)) # 
                bit_stream += (_dots)
            _len = len(bit_stream)
            _num_elem = int((_len+1) / 2)
            textboxValue = ""
            hellChar = list(bit_stream)
            for thing in hellChar:
                if thing == '1':
                    pysine.sine(frequency=mark, duration=bit_time)
                else:
                    pysine.sine(frequency=0, duration=bit_time)
        else:
            _num_elem = 0
        return(_num_elem)

print(textboxValue)
MyCode.MyWork()


                
        




